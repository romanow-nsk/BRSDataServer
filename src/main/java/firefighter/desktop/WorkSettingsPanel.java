/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package firefighter.desktop;

import firefighter.core.entity.baseentityes.JEmpty;
import firefighter.core.entity.subjectarea.WorkSettings;
import retrofit2.Response;

import java.awt.event.KeyEvent;
import java.io.IOException;

/**
 *
 * @author romanow
 */
public class WorkSettingsPanel extends BasePanel{
    private WorkSettings ws;
    public WorkSettingsPanel() {
        initComponents();
        }
    public void initPanel(Client main0){
        super.initPanel(main0);
        }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel15 = new javax.swing.JLabel();
        ServerFileDirectory = new javax.swing.JTextField();
        ServerFileDirectoryDefault = new javax.swing.JCheckBox();
        ConvertArtifact = new javax.swing.JCheckBox();
        jSeparator1 = new javax.swing.JSeparator();
        GUIrefreshPeriod = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        ArchiveDepthInDay = new javax.swing.JTextField();
        StreamDataPeriod = new javax.swing.JTextField();
        StreamDataLongPeriod = new javax.swing.JTextField();
        FailureTestPeriod = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        EventsPeriod = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        RegisterAge = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        PLMEmulator = new javax.swing.JCheckBox();
        PLMPort = new javax.swing.JTextField();
        PLMIP = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        PLMTimeOut = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        PLMGroupSize = new javax.swing.JTextField();
        MainServer = new javax.swing.JCheckBox();
        jSeparator2 = new javax.swing.JSeparator();
        MailSendTo = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        MailHost = new javax.swing.JTextField();
        MailPort = new javax.swing.JTextField();
        MailBox = new javax.swing.JTextField();
        MailPass = new javax.swing.JTextField();
        MailSequrity = new javax.swing.JTextField();
        jLabel32 = new javax.swing.JLabel();
        MailNotification = new javax.swing.JCheckBox();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel5 = new javax.swing.JLabel();
        FileScanPeriod = new javax.swing.JTextField();
        jLabel33 = new javax.swing.JLabel();
        MainServerPeriod = new javax.swing.JTextField();
        jLabel34 = new javax.swing.JLabel();

        setLayout(null);

        jLabel15.setText("Каталог артефактов");
        add(jLabel15);
        jLabel15.setBounds(20, 70, 130, 14);

        ServerFileDirectory.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ServerFileDirectoryKeyPressed(evt);
            }
        });
        add(ServerFileDirectory);
        ServerFileDirectory.setBounds(140, 70, 240, 25);

        ServerFileDirectoryDefault.setSelected(true);
        ServerFileDirectoryDefault.setText("текущий");
        ServerFileDirectoryDefault.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ServerFileDirectoryDefaultItemStateChanged(evt);
            }
        });
        add(ServerFileDirectoryDefault);
        ServerFileDirectoryDefault.setBounds(20, 100, 110, 23);

        ConvertArtifact.setText("Конвертировать форматы");
        ConvertArtifact.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ConvertArtifactItemStateChanged(evt);
            }
        });
        add(ConvertArtifact);
        ConvertArtifact.setBounds(140, 100, 200, 23);
        add(jSeparator1);
        jSeparator1.setBounds(410, 40, 240, 10);

        GUIrefreshPeriod.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                GUIrefreshPeriodKeyPressed(evt);
            }
        });
        add(GUIrefreshPeriod);
        GUIrefreshPeriod.setBounds(310, 260, 70, 25);

        jLabel17.setText("Регистров в блоке");
        add(jLabel17);
        jLabel17.setBounds(420, 170, 110, 14);

        jLabel18.setText("Цикл опроса потоковых данных (сек)");
        add(jLabel18);
        jLabel18.setBounds(20, 180, 230, 14);

        jLabel19.setText("Цикл снятия данных сервером СМУ (сек)");
        add(jLabel19);
        jLabel19.setBounds(20, 390, 260, 14);

        jLabel20.setText("Цикл обнаружения аварий (сек)");
        add(jLabel20);
        jLabel20.setBounds(20, 240, 230, 14);

        ArchiveDepthInDay.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ArchiveDepthInDayKeyPressed(evt);
            }
        });
        add(ArchiveDepthInDay);
        ArchiveDepthInDay.setBounds(310, 140, 70, 25);

        StreamDataPeriod.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                StreamDataPeriodKeyPressed(evt);
            }
        });
        add(StreamDataPeriod);
        StreamDataPeriod.setBounds(310, 170, 70, 25);

        StreamDataLongPeriod.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                StreamDataLongPeriodKeyPressed(evt);
            }
        });
        add(StreamDataLongPeriod);
        StreamDataLongPeriod.setBounds(310, 200, 70, 25);

        FailureTestPeriod.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                FailureTestPeriodKeyPressed(evt);
            }
        });
        add(FailureTestPeriod);
        FailureTestPeriod.setBounds(310, 230, 70, 25);

        jLabel21.setText("Период обновления форм ЧМИ (сек)");
        add(jLabel21);
        jLabel21.setBounds(20, 270, 210, 14);

        EventsPeriod.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                EventsPeriodKeyPressed(evt);
            }
        });
        add(EventsPeriod);
        EventsPeriod.setBounds(310, 290, 70, 25);

        jLabel22.setText("\"Возраст\" регистра в кэше (мс)");
        add(jLabel22);
        jLabel22.setBounds(20, 330, 250, 14);

        RegisterAge.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                RegisterAgeKeyPressed(evt);
            }
        });
        add(RegisterAge);
        RegisterAge.setBounds(310, 320, 70, 25);

        jLabel23.setText("Цикл опроса дискретных   событий (сек)");
        add(jLabel23);
        jLabel23.setBounds(20, 300, 250, 14);

        PLMEmulator.setText("Эмулятор ПЛК");
        PLMEmulator.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                PLMEmulatorItemStateChanged(evt);
            }
        });
        add(PLMEmulator);
        PLMEmulator.setBounds(420, 40, 150, 23);

        PLMPort.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                PLMPortKeyPressed(evt);
            }
        });
        add(PLMPort);
        PLMPort.setBounds(530, 100, 60, 25);

        PLMIP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                PLMIPKeyPressed(evt);
            }
        });
        add(PLMIP);
        PLMIP.setBounds(530, 70, 110, 25);

        jLabel24.setText("Глубина архива в днях");
        add(jLabel24);
        jLabel24.setBounds(20, 150, 180, 14);

        jLabel25.setText("IP ПЛМ");
        add(jLabel25);
        jLabel25.setBounds(420, 80, 60, 14);

        PLMTimeOut.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                PLMTimeOutKeyPressed(evt);
            }
        });
        add(PLMTimeOut);
        PLMTimeOut.setBounds(530, 130, 60, 25);

        jLabel26.setText("Порт ПЛМ");
        add(jLabel26);
        jLabel26.setBounds(420, 110, 60, 14);

        jLabel27.setText("Тайм-аут (с)");
        add(jLabel27);
        jLabel27.setBounds(420, 140, 90, 14);

        PLMGroupSize.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                PLMGroupSizeKeyPressed(evt);
            }
        });
        add(PLMGroupSize);
        PLMGroupSize.setBounds(530, 160, 60, 25);

        MainServer.setText("Главный сервер СМУ");
        MainServer.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                MainServerItemStateChanged(evt);
            }
        });
        add(MainServer);
        MainServer.setBounds(20, 40, 170, 23);
        add(jSeparator2);
        jSeparator2.setBounds(20, 130, 360, 10);

        MailSendTo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                MailSendToKeyPressed(evt);
            }
        });
        add(MailSendTo);
        MailSendTo.setBounds(530, 350, 170, 25);

        jLabel12.setText("Порт");
        add(jLabel12);
        jLabel12.setBounds(420, 240, 60, 14);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("ПЛК");
        add(jLabel4);
        jLabel4.setBounds(660, 30, 50, 14);

        jLabel28.setText("Ящик");
        add(jLabel28);
        jLabel28.setBounds(420, 270, 40, 14);

        jLabel29.setText("Сервер ");
        add(jLabel29);
        jLabel29.setBounds(420, 210, 70, 14);

        jLabel30.setText("Пароль");
        add(jLabel30);
        jLabel30.setBounds(420, 300, 50, 14);

        jLabel31.setText("Получатель");
        add(jLabel31);
        jLabel31.setBounds(420, 360, 90, 14);

        MailHost.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                MailHostKeyPressed(evt);
            }
        });
        add(MailHost);
        MailHost.setBounds(530, 200, 170, 25);

        MailPort.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                MailPortKeyPressed(evt);
            }
        });
        add(MailPort);
        MailPort.setBounds(530, 230, 50, 25);

        MailBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                MailBoxKeyPressed(evt);
            }
        });
        add(MailBox);
        MailBox.setBounds(530, 260, 170, 25);

        MailPass.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                MailPassKeyPressed(evt);
            }
        });
        add(MailPass);
        MailPass.setBounds(530, 290, 90, 25);

        MailSequrity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                MailSequrityKeyPressed(evt);
            }
        });
        add(MailSequrity);
        MailSequrity.setBounds(530, 320, 90, 25);

        jLabel32.setText("Безопасность");
        add(jLabel32);
        jLabel32.setBounds(420, 330, 90, 14);

        MailNotification.setText("Уведомления по Mail");
        MailNotification.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                MailNotificationItemStateChanged(evt);
            }
        });
        add(MailNotification);
        MailNotification.setBounds(530, 380, 170, 23);
        add(jSeparator3);
        jSeparator3.setBounds(410, 190, 190, 10);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Уведомления");
        add(jLabel5);
        jLabel5.setBounds(610, 180, 90, 14);

        FileScanPeriod.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                FileScanPeriodKeyPressed(evt);
            }
        });
        add(FileScanPeriod);
        FileScanPeriod.setBounds(310, 350, 70, 25);

        jLabel33.setText("Длинный цикл опроса потоковых данных (сек)");
        add(jLabel33);
        jLabel33.setBounds(20, 210, 260, 14);

        MainServerPeriod.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                MainServerPeriodKeyPressed(evt);
            }
        });
        add(MainServerPeriod);
        MainServerPeriod.setBounds(310, 380, 70, 25);

        jLabel34.setText("Цикл опроса источников файлов (сек)");
        add(jLabel34);
        jLabel34.setBounds(20, 360, 260, 14);
    }// </editor-fold>//GEN-END:initComponents

    private void ServerFileDirectoryKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ServerFileDirectoryKeyPressed
        if(evt.getKeyCode()!=10) return;
        ws.setDataServerFileDir(ServerFileDirectory.getText());
        updateSettings(evt);
    }//GEN-LAST:event_ServerFileDirectoryKeyPressed

    private void ServerFileDirectoryDefaultItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ServerFileDirectoryDefaultItemStateChanged
            ws.setDataServerFileDirDefault(ServerFileDirectoryDefault.isSelected());
            updateSettings(null);
    }//GEN-LAST:event_ServerFileDirectoryDefaultItemStateChanged

    private void ConvertArtifactItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ConvertArtifactItemStateChanged
            ws.setConvertAtrifact(ConvertArtifact.isSelected());
            updateSettings(null);
    }//GEN-LAST:event_ConvertArtifactItemStateChanged

    private void GUIrefreshPeriodKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_GUIrefreshPeriodKeyPressed
        if(evt.getKeyCode()!=10) return;
        try {
            ws.setGUIrefreshPeriod(Integer.parseInt(GUIrefreshPeriod.getText()));
            updateSettings(evt);
            } catch (Exception ee){ System.out.println("Недопустимый формат целого"); }
    }//GEN-LAST:event_GUIrefreshPeriodKeyPressed

    private void ArchiveDepthInDayKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ArchiveDepthInDayKeyPressed
        if(evt.getKeyCode()!=10) return;
        try {
            ws.setArchiveDepthInDay(Integer.parseInt(ArchiveDepthInDay.getText()));
            updateSettings(evt);
        } catch (Exception ee){ System.out.println("Недопустимый формат целого"); }
    }//GEN-LAST:event_ArchiveDepthInDayKeyPressed

    private void StreamDataPeriodKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_StreamDataPeriodKeyPressed
        if(evt.getKeyCode()!=10) return;
        try {
            ws.setStreamDataPeriod(Integer.parseInt(StreamDataPeriod.getText()));
            updateSettings(evt);
        } catch (Exception ee){ System.out.println("Недопустимый формат целого"); }
    }//GEN-LAST:event_StreamDataPeriodKeyPressed

    private void StreamDataLongPeriodKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_StreamDataLongPeriodKeyPressed
        if(evt.getKeyCode()!=10) return;
        try {
            ws.setStreamDataLongPeriod(Integer.parseInt(StreamDataLongPeriod.getText()));
            updateSettings(evt);
        } catch (Exception ee){ System.out.println("Недопустимый формат целого"); }
    }//GEN-LAST:event_StreamDataLongPeriodKeyPressed

    private void FailureTestPeriodKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FailureTestPeriodKeyPressed
        if(evt.getKeyCode()!=10) return;
        try {
            ws.setFailureTestPeriod(Integer.parseInt(FailureTestPeriod.getText()));
            updateSettings(evt);
        } catch (Exception ee){ System.out.println("Недопустимый формат целого"); }
    }//GEN-LAST:event_FailureTestPeriodKeyPressed

    private void EventsPeriodKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_EventsPeriodKeyPressed
        if(evt.getKeyCode()!=10) return;
        try {
            ws.setEventTestPeriod(Integer.parseInt(EventsPeriod.getText()));
            updateSettings(evt);
        } catch (Exception ee){ System.out.println("Недопустимый формат целого"); }
    }//GEN-LAST:event_EventsPeriodKeyPressed

    private void RegisterAgeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_RegisterAgeKeyPressed
        if(evt.getKeyCode()!=10) return;
        try {
            ws.setMaxRegisterAge(Integer.parseInt(RegisterAge.getText()));
            updateSettings(evt);
        } catch (Exception ee){ System.out.println("Недопустимый формат целого"); }
    }//GEN-LAST:event_RegisterAgeKeyPressed

    private void setIPPortVisible(){
        boolean vv = ws.isEmulated();
        PLMIP.setEnabled(!vv);
        PLMPort.setEnabled(!vv);
        PLMTimeOut.setEnabled(!vv);
        PLMGroupSize.setEnabled(!vv);
        }

    private void PLMEmulatorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_PLMEmulatorItemStateChanged
        ws.setEmulated(PLMEmulator.isSelected());
        updateSettings();
        setIPPortVisible();
    }//GEN-LAST:event_PLMEmulatorItemStateChanged

    private void PLMPortKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PLMPortKeyPressed
        if(evt.getKeyCode()!=10) return;
        try {
            ws.setPlmPort(Integer.parseInt(PLMPort.getText()));
            updateSettings(evt);
        } catch (Exception ee){ System.out.println("Недопустимый формат целого"); }

    }//GEN-LAST:event_PLMPortKeyPressed

    private void PLMIPKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PLMIPKeyPressed
        if(evt.getKeyCode()!=10) return;
            ws.setPlmIP(PLMIP.getText());
            updateSettings(evt);
    }//GEN-LAST:event_PLMIPKeyPressed

    private void PLMTimeOutKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PLMTimeOutKeyPressed
        if(evt.getKeyCode()!=10) return;
        try {
            ws.setPlmTimeOut(Integer.parseInt(PLMTimeOut.getText()));
            updateSettings(evt);
        } catch (Exception ee){ System.out.println("Недопустимый формат целого"); }

    }//GEN-LAST:event_PLMTimeOutKeyPressed

    private void PLMGroupSizeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PLMGroupSizeKeyPressed
        if(evt.getKeyCode()!=10) return;
        try {
            ws.setPlmRegGroupSize(Integer.parseInt(PLMGroupSize.getText()));
            updateSettings(evt);
        } catch (Exception ee){ System.out.println("Недопустимый формат целого"); }
    }//GEN-LAST:event_PLMGroupSizeKeyPressed

    private void MainServerItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_MainServerItemStateChanged
        ws.setMainServer(MainServer.isSelected());
        updateSettings();
    }//GEN-LAST:event_MainServerItemStateChanged

    private void MailSendToKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_MailSendToKeyPressed
        if(evt.getKeyCode()!=10) return;
        ws.setMailToSend(MailSendTo.getText());
        updateSettings(evt);
    }//GEN-LAST:event_MailSendToKeyPressed

    private void MailHostKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_MailHostKeyPressed
        if(evt.getKeyCode()!=10) return;
        ws.setMailHost(MailHost.getText());
        updateSettings(evt);

    }//GEN-LAST:event_MailHostKeyPressed

    private void MailPortKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_MailPortKeyPressed
        if(evt.getKeyCode()!=10) return;
        try {
            ws.setMailPort(Integer.parseInt(MailPort.getText()));
            updateSettings(evt);
        } catch (Exception ee){ System.out.println("Недопустимый формат целого"); }
    }//GEN-LAST:event_MailPortKeyPressed

    private void MailBoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_MailBoxKeyPressed
        if(evt.getKeyCode()!=10) return;
        ws.setMailBox(MailBox.getText());
        updateSettings(evt);
    }//GEN-LAST:event_MailBoxKeyPressed

    private void MailPassKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_MailPassKeyPressed
        if(evt.getKeyCode()!=10) return;
        ws.setMailPass(MailPass.getText());
        updateSettings(evt);
    }//GEN-LAST:event_MailPassKeyPressed

    private void MailSequrityKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_MailSequrityKeyPressed
        if(evt.getKeyCode()!=10) return;
        ws.setMailSecur(MailSequrity.getText());
        updateSettings(evt);
    }//GEN-LAST:event_MailSequrityKeyPressed

    private void MailNotificationItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_MailNotificationItemStateChanged
        ws.setMailNotifycation(MailNotification.isSelected());
        updateSettings();
    }//GEN-LAST:event_MailNotificationItemStateChanged

    private void FileScanPeriodKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FileScanPeriodKeyPressed
        if(evt.getKeyCode()!=10) return;
        try {
            ws.setFileScanPeriod(Integer.parseInt(FileScanPeriod.getText()));
            updateSettings(evt);
        } catch (Exception ee){ System.out.println("Недопустимый формат целого"); }
    }//GEN-LAST:event_FileScanPeriodKeyPressed

    private void MainServerPeriodKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_MainServerPeriodKeyPressed
        if(evt.getKeyCode()!=10) return;
        try {
            ws.setMainServerPeriod(Integer.parseInt(MainServerPeriod.getText()));
            updateSettings(evt);
        } catch (Exception ee){ System.out.println("Недопустимый формат целого"); }
    }//GEN-LAST:event_MainServerPeriodKeyPressed

    @Override
    public void refresh() {
        try {
            Response<WorkSettings> wsr = main.service.workSettings(main.debugToken).execute();
            if (!wsr.isSuccessful()){
                System.out.println("Ошибка чтения настроек  " + httpError(wsr));
                return;
                }
            main.workSettings = wsr.body();
            ws = main.workSettings;
            ServerFileDirectory.setText(ws.getDataServerFileDir());
            ServerFileDirectoryDefault.setSelected(ws.isDataServerFileDirDefault());
            ConvertArtifact.setSelected(ws.isConvertAtrifact());
            GUIrefreshPeriod.setText(""+ws.getGUIrefreshPeriod());
            StreamDataPeriod.setText(""+ws.getStreamDataPeriod());
            StreamDataLongPeriod.setText(""+ws.getStreamDataLongPeriod());
            FailureTestPeriod.setText(""+ws.getFailureTestPeriod());
            EventsPeriod.setText(""+ws.getEventTestPeriod());
            RegisterAge.setText(""+ws.getMaxRegisterAge());
            ArchiveDepthInDay.setText(""+ws.getArchiveDepthInDay());
            PLMEmulator.setSelected(ws.isEmulated());
            PLMIP.setText(ws.getPlmIP());
            PLMPort.setText(""+ws.getPlmPort());
            PLMTimeOut.setText(""+ws.getPlmTimeOut());
            PLMGroupSize.setText(""+ws.getPlmRegGroupSize());
            MainServer.setSelected(ws.isMainServer());
            MailHost.setText(ws.getMailHost());
            MailPass.setText(ws.getMailPass());
            MailSequrity.setText(ws.getMailSecur());
            MailBox.setText(ws.getMailBox());
            MailSendTo.setText(ws.getMailToSend());
            MailPort.setText(""+ws.getMailPort());
            MailNotification.setSelected(ws.isMailNotifycation());
            MainServerPeriod.setText(""+ws.getMainServerPeriod());
            FileScanPeriod.setText(""+ws.getFileScanPeriod());
            setIPPortVisible();
        } catch (IOException e) { System.out.println(e.toString()); }
    }

    @Override
    public void eventPanel(int code, int par1, long par2, String par3) {
        if (code==EventRefreshSettings){
            refresh();
            main.sendEventPanel(EventRefreshSettingsDone,0,0,"");
            }
        }

    @Override
    public void shutDown() {
    }

    private void updateSettings(){
        updateSettings(null);
        }
    private void updateSettings(KeyEvent evt){
        Response<JEmpty> wsr = null;
        try {
            wsr = main.service.updateWorkSettings(main.debugToken,ws).execute();
            if (!wsr.isSuccessful()){
                System.out.println("Ошибка обновления настроек  " + httpError(wsr));
                return;
                }
            System.out.println("Настройки обновлены");
            if (evt!=null)
                main.viewUpdate(evt,true);
            main.sendEventPanel(EventRefreshSettings,0,0,"");
            } catch (IOException e) {
                main.viewUpdate(evt,false);
                System.out.println(e.toString());
                }
        }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ArchiveDepthInDay;
    private javax.swing.JCheckBox ConvertArtifact;
    private javax.swing.JTextField EventsPeriod;
    private javax.swing.JTextField FailureTestPeriod;
    private javax.swing.JTextField FileScanPeriod;
    private javax.swing.JTextField GUIrefreshPeriod;
    private javax.swing.JTextField MailBox;
    private javax.swing.JTextField MailHost;
    private javax.swing.JCheckBox MailNotification;
    private javax.swing.JTextField MailPass;
    private javax.swing.JTextField MailPort;
    private javax.swing.JTextField MailSendTo;
    private javax.swing.JTextField MailSequrity;
    private javax.swing.JCheckBox MainServer;
    private javax.swing.JTextField MainServerPeriod;
    private javax.swing.JCheckBox PLMEmulator;
    private javax.swing.JTextField PLMGroupSize;
    private javax.swing.JTextField PLMIP;
    private javax.swing.JTextField PLMPort;
    private javax.swing.JTextField PLMTimeOut;
    private javax.swing.JTextField RegisterAge;
    private javax.swing.JTextField ServerFileDirectory;
    private javax.swing.JCheckBox ServerFileDirectoryDefault;
    private javax.swing.JTextField StreamDataLongPeriod;
    private javax.swing.JTextField StreamDataPeriod;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    // End of variables declaration//GEN-END:variables
}
